AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  UsernameTag:
    Type: String
    Description: The team or group name to be used as the tag value
    Default: DsHackathonGroup1 # Make sure to update this value to (DsHackathonGroupX) where X is your group number

Resources:
  # VPC for the Team
  TeamVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${UsernameTag}-VPC"
        - Key: Username
          Value: !Ref UsernameTag

  # Subnet for the Team (AZ 1)
  TeamSubnetAZ1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TeamVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]  # AZ 1 (e.g., eu-central-1a)
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${UsernameTag}-Subnet-AZ1"
        - Key: Username
          Value: !Ref UsernameTag

  # Subnet for the Team (AZ 2)
  TeamSubnetAZ2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TeamVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [ 1, !GetAZs '' ]  # AZ 2 (e.g., eu-central-1b)
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${UsernameTag}-Subnet-AZ2"
        - Key: Username
          Value: !Ref UsernameTag

  # Internet Gateway for the Team VPC
  TeamInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${UsernameTag}-IGW"
        - Key: Username
          Value: !Ref UsernameTag

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref TeamVPC
      InternetGatewayId: !Ref TeamInternetGateway

  # Route Table for Public Subnets
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref TeamVPC
      Tags:
        - Key: Name
          Value: !Sub "${UsernameTag}-PublicRouteTable"
        - Key: Username
          Value: !Ref UsernameTag

  # Route to Internet Gateway
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref TeamInternetGateway

  # Associate Subnets with Public Route Table
  AssociateSubnetAZ1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref TeamSubnetAZ1
      RouteTableId: !Ref PublicRouteTable

  AssociateSubnetAZ2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref TeamSubnetAZ2
      RouteTableId: !Ref PublicRouteTable

  # Flask App Lambda Function
  FlaskAppFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.9
      MemorySize: 128
      Timeout: 30
      CodeUri: ./
      Environment:
        Variables:
          FLASK_ENV: production
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonAPIGatewayInvokeFullAccess
        - AmazonRDSFullAccess
      Tags:
        Key: Username
        Value: !Ref UsernameTag
      VpcConfig:
        SecurityGroupIds: 
          - !Ref FlaskAppSecurityGroup
        SubnetIds:
          - !Ref TeamSubnetAZ1
          - !Ref TeamSubnetAZ2
      Events:
        WelcomeApiEvent:
          Type: Api
          Properties:
            Path: /welcome
            Method: GET
        GoodbyeApiEvent:
          Type: Api
          Properties:
            Path: /goodbye
            Method: GET
        HealthApiEvent:
          Type: Api
          Properties:
            Path: /health
            Method: GET

  # Security Group for Flask App
  FlaskAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow Lambda Function to communicate
      VpcId: !Ref TeamVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # RDS Instance in the Team's VPC
  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: db.t4g.micro
      AllocatedStorage: 5
      Engine: postgres
      EngineVersion: "13.18"
      MasterUsername: hackathonuser
      MasterUserPassword: !Sub '{{resolve:ssm-secure:/hackathonuser/rds/password}}'
      PubliclyAccessible: true
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      DBSubnetGroupName: !Ref RDSSubnetGroup
      Tags:
        - Key: Username 
          Value: !Ref UsernameTag
        - Key: Name
          Value: !Sub "${UsernameTag}-RDSInstance"

  # Security Group for RDS
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable database access
      VpcId: !Ref TeamVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0  # Restrict to appropriate CIDR range or VPC

  # DB Subnet Group for RDS
  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS
      SubnetIds:
        - !Ref TeamSubnetAZ1
        - !Ref TeamSubnetAZ2
      Tags:
        - Key: Username
          Value: !Ref UsernameTag
        - Key: Name
          Value: !Sub "${UsernameTag}-RDSSubnetGroup"
